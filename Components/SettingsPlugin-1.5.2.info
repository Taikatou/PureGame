{"Name":"Settings Plugin","Id":2032,"Alias":"SettingsPlugin","Description":"# Settings Plugin Details\r\n\r\n\r\nCreate and access settings from shared code across all of your mobile apps!\r\n\r\n### Uses the native settings management\r\n* Android: SharedPreferences\r\n* iOS: NSUserDefaults\r\n* Windows Phone: IsolatedStorageSettings\r\n* Windows Store / Windows Phone RT: ApplicationDataContainer\r\n\r\n\r\n### Example\r\n```\r\nprivate static ISettings AppSettings\r\n{\r\n  get\r\n  {\r\n    return CrossSettings.Current;\r\n  }\r\n}\r\n\r\nprivate const string UserNameKey = \"username_key\";\r\nprivate static readonly string UserNameDefault = string.Empty;\r\n\r\npublic static string UserName\r\n{\r\n  get { return AppSettings.GetValueOrDefault(UserNameKey, UserNameDefault); }\r\n  set { AppSettings.AddOrUpdateValue(UserNameKey, value); }\r\n}\r\n```\r\n\r\nWorks completely from a shared code or PCL project.","Version":"1.5.2","Summary":"Create and access settings from shared code across all of your mobile apps from a simple cross-platform API.","QuickStart":"# Getting Started with Settings Plugin\r\n\r\n### Setup \u0026 Usage\r\n* Available on NuGet and Component: https://www.nuget.org/packages/Xam.Plugins.Settings/\r\n* Install into your PCL project and Client projects.\r\n* Open up Helpers/Settings.cs in your PCL for directions on how to use.\r\n* If you are not using a PCL you will find an _SettingsStarted.txt file under properties to get started. Else you can follow this guide:\r\n\r\n#### Create a new static class\r\nYou will want to create a new `static` class called \"Settings\" in your shared code project or PCL that will house all of your settings.\r\n\r\n```\r\npublic static class Settings\r\n{\r\n // code here...\r\n}\r\n```\r\n\r\n#### Gain Access to ISettings\r\nWhen you want to read/write setting you want to gain access via the ISettings API. I automatically have a singleton setup for you so you just need access:\r\n\r\n```\r\nprivate static ISettings AppSettings\r\n{\r\n  get\r\n  {\r\n    return CrossSettings.Current;\r\n  }\r\n}\r\n```\r\n\r\n#### Create your Key and Default Values\r\nEach setting consists of a `const string` key and a default value. I HIGHLY recommend declaring these ahead of time such as:\r\n\r\n```\r\nprivate const string UserNameKey = \"username_key\";\r\nprivate static readonly string UserNameDefault = string.Empty;\r\n\r\nprivate const string SomeIntKey = \"int_key\";\r\nprivate static readonly int SomeIntDefault = 6251986;\r\n```\r\n\r\n#### Create Getters and Setters for your Setting\r\nNow it is time to setup your actual setting that can be accessed from **ANY** project, whether it be a PCL, Shared Code, or a platform specific project. We do this by usign the two methods in the ISettings API: `GetValueOrDefault` and `AddOrUpdateValue`:\r\n\r\n```\r\npublic static string UserName\r\n{\r\n  get { return AppSettings.GetValueOrDefault\u003cstring\u003e(UserNameKey, UserNameDefault); }\r\n  set { AppSettings.AddOrUpdateValue\u003cstring\u003e(UserNameKey, value); }\r\n}\r\n\r\npublic static int SomeInt\r\n{\r\n  get { return AppSettings.GetValueOrDefault\u003cint\u003e(SomeIntKey, SomeIntDefault); }\r\n  set { AppSettings.AddOrUpdateValue\u003cint\u003e(SomeIntKey, value); }\r\n}\r\n```\r\n\r\nThere you have it! You are all done :)\r\n\r\n\r\n**iOS Specific**\r\nYou must enable generic type sharing in the settings. It is on by default on new projects.\r\n\r\n\r\n\r\n**Supports**\r\n* Xamarin.iOS\r\n* Xamarin.iOS (Unified)\r\n* Xamarin.Android\r\n* Windows Phone 8 (Silverlight)\r\n* Windows Pone 8.1 RT\r\n* Windows Store 8.0+","Hash":"fe3450ebeb2b3533fafabcd8206dc04c","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}